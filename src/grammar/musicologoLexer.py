# Generated from musicologo.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,8,128,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,3,1,35,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,53,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,
        3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,74,8,3,1,4,
        4,4,77,8,4,11,4,12,4,78,1,4,1,4,1,4,1,4,1,4,1,5,4,5,87,8,5,11,5,
        12,5,88,1,5,1,5,4,5,93,8,5,11,5,12,5,94,1,5,5,5,98,8,5,10,5,12,5,
        101,9,5,1,6,4,6,104,8,6,11,6,12,6,105,1,6,1,6,4,6,110,8,6,11,6,12,
        6,111,1,6,1,6,4,6,116,8,6,11,6,12,6,117,3,6,120,8,6,1,7,4,7,123,
        8,7,11,7,12,7,124,1,7,1,7,0,0,8,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
        8,1,0,3,3,0,48,57,65,90,97,122,1,0,48,57,3,0,9,10,13,13,32,32,145,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,1,17,1,0,0,0,3,34,1,0,0,0,5,52,
        1,0,0,0,7,73,1,0,0,0,9,76,1,0,0,0,11,86,1,0,0,0,13,103,1,0,0,0,15,
        122,1,0,0,0,17,18,5,32,0,0,18,2,1,0,0,0,19,20,5,99,0,0,20,21,5,97,
        0,0,21,22,5,114,0,0,22,23,5,103,0,0,23,24,5,97,0,0,24,35,5,114,0,
        0,25,26,5,108,0,0,26,27,5,111,0,0,27,28,5,97,0,0,28,35,5,100,0,0,
        29,30,5,99,0,0,30,31,5,114,0,0,31,35,5,103,0,0,32,33,5,108,0,0,33,
        35,5,100,0,0,34,19,1,0,0,0,34,25,1,0,0,0,34,29,1,0,0,0,34,32,1,0,
        0,0,35,4,1,0,0,0,36,37,5,114,0,0,37,38,5,101,0,0,38,39,5,99,0,0,
        39,40,5,111,0,0,40,41,5,114,0,0,41,42,5,116,0,0,42,43,5,97,0,0,43,
        53,5,114,0,0,44,45,5,99,0,0,45,46,5,117,0,0,46,53,5,116,0,0,47,48,
        5,114,0,0,48,49,5,99,0,0,49,53,5,116,0,0,50,51,5,99,0,0,51,53,5,
        116,0,0,52,36,1,0,0,0,52,44,1,0,0,0,52,47,1,0,0,0,52,50,1,0,0,0,
        53,6,1,0,0,0,54,55,5,101,0,0,55,56,5,120,0,0,56,57,5,112,0,0,57,
        58,5,111,0,0,58,59,5,114,0,0,59,60,5,116,0,0,60,61,5,97,0,0,61,74,
        5,114,0,0,62,63,5,101,0,0,63,64,5,120,0,0,64,65,5,112,0,0,65,66,
        5,111,0,0,66,67,5,114,0,0,67,74,5,116,0,0,68,69,5,101,0,0,69,70,
        5,120,0,0,70,74,5,112,0,0,71,72,5,101,0,0,72,74,5,120,0,0,73,54,
        1,0,0,0,73,62,1,0,0,0,73,68,1,0,0,0,73,71,1,0,0,0,74,8,1,0,0,0,75,
        77,7,0,0,0,76,75,1,0,0,0,77,78,1,0,0,0,78,76,1,0,0,0,78,79,1,0,0,
        0,79,80,1,0,0,0,80,81,5,46,0,0,81,82,5,109,0,0,82,83,5,112,0,0,83,
        84,5,51,0,0,84,10,1,0,0,0,85,87,7,0,0,0,86,85,1,0,0,0,87,88,1,0,
        0,0,88,86,1,0,0,0,88,89,1,0,0,0,89,90,1,0,0,0,90,99,5,47,0,0,91,
        93,7,0,0,0,92,91,1,0,0,0,93,94,1,0,0,0,94,92,1,0,0,0,94,95,1,0,0,
        0,95,96,1,0,0,0,96,98,5,47,0,0,97,92,1,0,0,0,98,101,1,0,0,0,99,97,
        1,0,0,0,99,100,1,0,0,0,100,12,1,0,0,0,101,99,1,0,0,0,102,104,7,1,
        0,0,103,102,1,0,0,0,104,105,1,0,0,0,105,103,1,0,0,0,105,106,1,0,
        0,0,106,107,1,0,0,0,107,109,5,58,0,0,108,110,7,1,0,0,109,108,1,0,
        0,0,110,111,1,0,0,0,111,109,1,0,0,0,111,112,1,0,0,0,112,119,1,0,
        0,0,113,115,5,58,0,0,114,116,7,1,0,0,115,114,1,0,0,0,116,117,1,0,
        0,0,117,115,1,0,0,0,117,118,1,0,0,0,118,120,1,0,0,0,119,113,1,0,
        0,0,119,120,1,0,0,0,120,14,1,0,0,0,121,123,7,2,0,0,122,121,1,0,0,
        0,123,124,1,0,0,0,124,122,1,0,0,0,124,125,1,0,0,0,125,126,1,0,0,
        0,126,127,6,7,0,0,127,16,1,0,0,0,13,0,34,52,73,78,88,94,99,105,111,
        117,119,124,1,6,0,0
    ]

class musicologoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    COMANDO_CARGAR = 2
    COMANDO_RECORTAR = 3
    COMANDO_EXPORTAR = 4
    ARCHIVO_MP3 = 5
    RUTA = 6
    TIEMPO = 7
    WS = 8

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "' '" ]

    symbolicNames = [ "<INVALID>",
            "COMANDO_CARGAR", "COMANDO_RECORTAR", "COMANDO_EXPORTAR", "ARCHIVO_MP3", 
            "RUTA", "TIEMPO", "WS" ]

    ruleNames = [ "T__0", "COMANDO_CARGAR", "COMANDO_RECORTAR", "COMANDO_EXPORTAR", 
                  "ARCHIVO_MP3", "RUTA", "TIEMPO", "WS" ]

    grammarFileName = "musicologo.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


